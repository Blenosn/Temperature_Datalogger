;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : DataLogger
;Version : 1.0
;Date    : 07/07/2016
;Author  : Bleno
;Company : Hewlett-Packard
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 14,745600 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;
;
;Graphic LCD initialization
;The PCD8544 connections are specified in the
;Project|Configure|C Compiler|Libraries|Graphic LCD menu:
;SDIN - PORTC Bit 3
;SCLK - PORTC Bit 5
;D /C - PORTC Bit 4
;/SCE - PORTC Bit 2
;/RES - PORTC Bit 1
;
;I2C Bus initialization
;I2C Port: PORTB
;I2C SDA bit: 0
;I2C SCL bit: 1
;
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// I2C Bus functions
;#include <i2c.h>
;
;// LM75 Temperature Sensor functions
;#include <lm75.h>
;
;// DS1307 Real Time Clock functions
;#include <ds1307.h>
;
;// Graphic LCD functions
;#include <glcd.h>
;
;// Font used for displaying text
;// on the graphic LCD
;#include <font5x7.h>
;
;//FUNÇOES EXTRAS
;#include <delay.h>
;#include "batman.h"
;#include "icon.h"
;#include "iconmin.h"
;#include "iconmax.h"
;#include "iron.h"
;#include "save.h"
;#include "cel.h"
;
;unsigned int flag=0;
;unsigned char hour, mint, sec, day, month, year, sem, msg[18],msgmin[8], msgmax[8], temp[7];
;unsigned int i=0, z, tempmin=500, tempmax=-300, q=0, y=0, comando;

	.DSEG
;
;
;char teste[];
;
;// Function used for reading image
;// data from external memory
;unsigned char read_ext_memory(GLCDMEMADDR_t addr)
; 0000 004E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 004F unsigned char data;
; 0000 0050 // Place your code here
; 0000 0051 
; 0000 0052 return data;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	addr -> Y+1
;	data -> R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0053 }
;PCODE: $00000016 VOL: 0
;
;// Function used for writing image
;// data to external memory
;void write_ext_memory(GLCDMEMADDR_t addr, unsigned char data)
; 0000 0058 {
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0059 // Place your code here
; 0000 005A 
; 0000 005B }
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 008E {
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 008F char status,data;
; 0000 0090 status=UCSRA;
;PCODE: $0000001E VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0091 data=UDR;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0092 flag=1;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0093 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0094    {
; 0000 0095    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0096 #if RX_BUFFER_SIZE == 256
; 0000 0097    // special case for receiver buffer size=256
; 0000 0098    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 0099 #else
; 0000 009A    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 009B    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 009C       {
; 0000 009D       rx_counter=0;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 009E       rx_buffer_overflow=1;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 009F       }
; 0000 00A0 #endif
; 0000 00A1    }
;PCODE: $0000003C VOL: 0
; 0000 00A2 }
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 00A9 {
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 00AA char data;
; 0000 00AB while (rx_counter==0);
;PCODE: $00000044 VOL: 0
;	data -> R17
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 00AC data=rx_buffer[rx_rd_index++];
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 00AD #if RX_BUFFER_SIZE != 256
; 0000 00AE if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 00AF #endif
; 0000 00B0 #asm("cli")
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
	cli
;PCODE: $00000059 VOL: 0
; 0000 00B1 --rx_counter;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 00B2 #asm("sei")
;PCODE: $0000005D VOL: 0
	sei
;PCODE: $0000005E VOL: 0
; 0000 00B3 return data;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 00B4 }
;PCODE: $00000062 VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 8
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE <= 256
;unsigned char tx_wr_index,tx_rd_index,tx_counter;
;#else
;unsigned int tx_wr_index,tx_rd_index,tx_counter;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 00C4 {
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 00C5 if (tx_counter)
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 00C6    {
; 0000 00C7    --tx_counter;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 00C8    UDR=tx_buffer[tx_rd_index++];
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00C9 #if TX_BUFFER_SIZE != 256
; 0000 00CA    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00CB #endif
; 0000 00CC    }
;PCODE: $00000078 VOL: 0
; 0000 00CD }
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 00D4 {
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00D5 while (tx_counter == TX_BUFFER_SIZE);
;PCODE: $0000007F VOL: 0
;	c -> Y+0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00D6 #asm("cli")
;PCODE: $00000086 VOL: 0
	cli
;PCODE: $00000087 VOL: 0
; 0000 00D7 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00D8    {
; 0000 00D9    tx_buffer[tx_wr_index++]=c;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00DA #if TX_BUFFER_SIZE != 256
; 0000 00DB    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00DC #endif
; 0000 00DD    ++tx_counter;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00DE    }
; 0000 00DF else
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00E0    UDR=c;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00E1 #asm("sei")
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
	sei
;PCODE: $000000A7 VOL: 0
; 0000 00E2 }
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;// Declare your global variables here
;unsigned char comand;
;
;//FUNÇÃO PARA RECEBER A HORA E O DIA DO RTC E TRANSFORMAR EM CARACTER DA ASCII
;void horaDia()
; 0000 00ED {
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00EE     rtc_get_time(&hour,&mint,&sec);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00EF     msg[0]=(hour/10)+48;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00F0     msg[1]=(hour%10)+48;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00F1     msg[2]=':';
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00F2     msg[3]=(mint/10)+48;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00F3     msg[4]=(mint%10)+48;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00F4     msg[5]=':';
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00F5     msg[6]=(sec/10)+48;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00F6     msg[7]=(sec%10)+48;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00F7 
; 0000 00F8     rtc_get_date(&sem,&day,&month,&year);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00F9     msg[8]=(day/10)+48;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00FA     msg[9]=(day%10)+48;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00FB     msg[10]='/';
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00FC     msg[11]=(month/10)+48;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00FD     msg[12]=(month%10)+48;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00FE     msg[13]='/';
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00FF     msg[14]=2+48;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0100     msg[15]=48;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0101     msg[16]=((year%100)/10)+48;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0102     msg[17]=(year%10)+48;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 0103 
; 0000 0104 }
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;
;//FUNÇÃO PARA RECEBER A TEMPERATURA DO LM75
;void tempt()
; 0000 0108 {
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0109     int temperatura;
; 0000 010A     temp[0]=' ';   //sinal da temperatura
;PCODE: $00000127 VOL: 0
;	temperatura -> R16,R17
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 010B     temperatura=lm75_temperature_10(0);  //recebe a temperatura do lm75 multiplicada por 10
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 010C /*
; 0000 010D     if(tempmax<temperatura)
; 0000 010E     {
; 0000 010F         tempmax=temperatura;
; 0000 0110         rtc_get_time(&hour,&mint,&sec);
; 0000 0111         msgmax[0]=(hour/10)+48;
; 0000 0112         msgmax[1]=(hour%10)+48;
; 0000 0113         msgmax[2]=':';
; 0000 0114         msgmax[3]=(mint/10)+48;
; 0000 0115         msgmax[4]=(mint%10)+48;
; 0000 0116         msgmax[5]=':';
; 0000 0117         msgmax[6]=(sec/10)+48;
; 0000 0118         msgmax[7]=(sec%10)+48;
; 0000 0119     }
; 0000 011A 
; 0000 011B 
; 0000 011C     if(tempmin>temperatura)
; 0000 011D     {
; 0000 011E         tempmin=temperatura;
; 0000 011F         rtc_get_time(&hour,&mint,&sec);
; 0000 0120         msgmin[0]=(hour/10)+48;
; 0000 0121         msgmin[1]=(hour%10)+48;
; 0000 0122         msgmin[2]=':';
; 0000 0123         msgmin[3]=(mint/10)+48;
; 0000 0124         msgmin[4]=(mint%10)+48;
; 0000 0125         msgmin[5]=':';
; 0000 0126         msgmin[6]=(sec/10)+48;
; 0000 0127         msgmin[7]=(sec%10)+48;
; 0000 0128     }
; 0000 0129  */
; 0000 012A 
; 0000 012B    if(temperatura<0) //sinal negativo caso temperatura <0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 012C     {
; 0000 012D         temp[0]='-';
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 012E         temperatura=-temperatura;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 012F     }
; 0000 0130     if(temperatura<100)
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 0131     temp[1]=' ';
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 0132     else
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0133     temp[1]=(temperatura/100)+48;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 0134 
; 0000 0135     temp[2]=((temperatura%100)/10)+48;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 0136     temp[3]='.';
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0137     temp[4]=(temperatura%10)+48;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 0138     temp[5]=' ';
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 0139     temp[6]='C';
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 013A 
; 0000 013B }
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;
;
;//FUNÇÃO PARA SALVAR NA EEPROM
;void save()
; 0000 0140 {
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 0141     int p=0;
; 0000 0142     horaDia();
;PCODE: $00000161 VOL: 0
;	p -> R16,R17
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 0143     q=y+8;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 0144     while(y<q)
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0145     {
; 0000 0146         teste[y]=msg[p];
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 0147         y++;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 0148         p++;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 0149     }
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 014A 
; 0000 014B     teste[y]=' ';
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 014C     y++;
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 014D 
; 0000 014E     tempt();
;PCODE: $00000185 VOL: 0
; 0000 014F     q=y+7;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 0150     p=0;
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 0151     while(y<q)
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0152     {
; 0000 0153         teste[y]=temp[p];
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 0154         p++;
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 0155         y++;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 0156     }
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 0157 
; 0000 0158     teste[y]='\n';
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 0159     y++;
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 015A 
; 0000 015B }
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;
;//FUNÇÃO PARA ENVIAR OS DADOS PELO BLUETOOTH
;void send()
; 0000 015F {
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 0160     int z=0;
; 0000 0161     for(i=8;i<18;i++)
;PCODE: $000001AD VOL: 0
;	z -> R16,R17
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 0162     {
; 0000 0163         putchar(msg[i]);
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 0164     }
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 0165     putchar('\n');
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 0166 
; 0000 0167     while(z<q)
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 0168     {
; 0000 0169         putchar(teste[z]);
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 016A         z++;
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 016B     }
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 016C }
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;
;
;//FUNÇÃO PARA TRATAR A INTERRUPÇÃO VINDA DO BLUETOOTH
;void interrup(char k)
; 0000 0171 {
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 0172     comand=k;
;PCODE: $000001D9 VOL: 0
;	k -> Y+0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 0173     glcd_clear();
;PCODE: $000001DC VOL: 0
; 0000 0174     glcd_outtext("\nBluetooth\nConexao\nOK...");
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 0175     glcd_putimagef(65,5,cel, GLCD_PUTCOPY);
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 0176     delay_ms(2000);
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 0177     if(comand=='a')
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 0178     {
; 0000 0179         glcd_clear();
;PCODE: $000001ED VOL: 0
; 0000 017A         glcd_outtextxy(0,10,"\n  Iniciando \n   Download..");
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 017B         delay_ms(2000);
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 017C 
; 0000 017D         send();
;PCODE: $000001F7 VOL: 0
; 0000 017E 
; 0000 017F         glcd_outtextxy(0,10,"\n  Download \n   Concluido!");
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 0180         delay_ms(2000);
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 0181     }
; 0000 0182 
; 0000 0183     comand='0';
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 0184 }
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0

	.DSEG
_0x25:
	.BYTE 0x50
;
;
;void main(void)
; 0000 0188 {

	.CSEG
;PCODE: $00000207 VOL: 0
; 0000 0189 // Declare your local variables here
; 0000 018A int j=0, w=0, a;
; 0000 018B char k, sign, hourprox;
; 0000 018C 
; 0000 018D // Graphic LCD initialization data
; 0000 018E GLCDINIT_t glcd_init_data;
; 0000 018F 
; 0000 0190 // Input/Output Ports initialization
; 0000 0191 // Port B initialization
; 0000 0192 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0193 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 0194 PORTB=0x00;
;PCODE: $00000208 VOL: 0
;	j -> R16,R17
;	w -> R18,R19
;	a -> R20,R21
;	k -> Y+10
;	sign -> Y+9
;	hourprox -> Y+8
;	glcd_init_data -> Y+0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 0195 DDRB=0xFF;
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 0196 
; 0000 0197 // Port C initialization
; 0000 0198 // Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0199 // State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 019A PORTC=0x00;
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 019B DDRC=0x7F;
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 019C 
; 0000 019D // Port D initialization
; 0000 019E // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 019F // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 01A0 PORTD=0x00;
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 01A1 DDRD=0x00;
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 01A2 
; 0000 01A3 // Timer/Counter 0 initialization
; 0000 01A4 // Clock source: System Clock
; 0000 01A5 // Clock value: Timer 0 Stopped
; 0000 01A6 TCCR0=0x00;
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 01A7 TCNT0=0x00;
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 01A8 
; 0000 01A9 // Timer/Counter 1 initialization
; 0000 01AA // Clock source: System Clock
; 0000 01AB // Clock value: Timer1 Stopped
; 0000 01AC // Mode: Normal top=0xFFFF
; 0000 01AD // OC1A output: Discon.
; 0000 01AE // OC1B output: Discon.
; 0000 01AF // Noise Canceler: Off
; 0000 01B0 // Input Capture on Falling Edge
; 0000 01B1 // Timer1 Overflow Interrupt: Off
; 0000 01B2 // Input Capture Interrupt: Off
; 0000 01B3 // Compare A Match Interrupt: Off
; 0000 01B4 // Compare B Match Interrupt: Off
; 0000 01B5 TCCR1A=0x00;
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 01B6 TCCR1B=0x00;
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 01B7 TCNT1H=0x00;
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 01B8 TCNT1L=0x00;
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 01B9 ICR1H=0x00;
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 01BA ICR1L=0x00;
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 01BB OCR1AH=0x00;
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 01BC OCR1AL=0x00;
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0000 01BD OCR1BH=0x00;
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 01BE OCR1BL=0x00;
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 01BF 
; 0000 01C0 // Timer/Counter 2 initialization
; 0000 01C1 // Clock source: System Clock
; 0000 01C2 // Clock value: Timer2 Stopped
; 0000 01C3 // Mode: Normal top=0xFF
; 0000 01C4 // OC2 output: Disconnected
; 0000 01C5 ASSR=0x00;
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 01C6 TCCR2=0x00;
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 01C7 TCNT2=0x00;
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 01C8 OCR2=0x00;
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 01C9 
; 0000 01CA // External Interrupt(s) initialization
; 0000 01CB // INT0: Off
; 0000 01CC // INT1: Off
; 0000 01CD MCUCR=0x00;
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0000 01CE 
; 0000 01CF // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 01D0 TIMSK=0x00;
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 01D1 
; 0000 01D2 // USART initialization
; 0000 01D3 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 01D4 // USART Receiver: On
; 0000 01D5 // USART Transmitter: On
; 0000 01D6 // USART Mode: Asynchronous
; 0000 01D7 // USART Baud Rate: 19200
; 0000 01D8 UCSRA=0x00;
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 01D9 UCSRB=0xD8;
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 01DA UCSRC=0x86;
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 01DB UBRRH=0x00;
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 01DC UBRRL=0x2F;
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 01DD 
; 0000 01DE // Analog Comparator initialization
; 0000 01DF // Analog Comparator: Off
; 0000 01E0 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 01E1 ACSR=0x80;
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 01E2 SFIOR=0x00;
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 01E3 
; 0000 01E4 // ADC initialization
; 0000 01E5 // ADC disabled
; 0000 01E6 ADCSRA=0x00;
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 01E7 
; 0000 01E8 // SPI initialization
; 0000 01E9 // SPI disabled
; 0000 01EA SPCR=0x00;
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 01EB 
; 0000 01EC // TWI initialization
; 0000 01ED // TWI disabled
; 0000 01EE TWCR=0x00;
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 01EF 
; 0000 01F0 // I2C Bus initialization
; 0000 01F1 // I2C Port: PORTB
; 0000 01F2 // I2C SDA bit: 0
; 0000 01F3 // I2C SCL bit: 1
; 0000 01F4 // Bit Rate: 100 kHz
; 0000 01F5 // Note: I2C settings are specified in the
; 0000 01F6 // Project|Configure|C Compiler|Libraries|I2C menu.
; 0000 01F7 i2c_init();
;PCODE: $00000251 VOL: 0
; 0000 01F8 
; 0000 01F9 // LM75 Temperature Sensor initialization
; 0000 01FA // thyst: -10°C
; 0000 01FB // tos: 50°C
; 0000 01FC // O.S. polarity: 0
; 0000 01FD lm75_init(0,-10,50,0);
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 01FE 
; 0000 01FF // DS1307 Real Time Clock initialization
; 0000 0200 // Square wave output on pin SQW/OUT: Off
; 0000 0201 // SQW/OUT pin state: 0
; 0000 0202 rtc_init(0,0,0);
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 0203 
; 0000 0204 
; 0000 0205 // Specify the current font for displaying text
; 0000 0206 glcd_init_data.font=font5x7;
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 0207 // No function is used for reading
; 0000 0208 // image data from external memory
; 0000 0209 glcd_init_data.readxmem=NULL;
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 020A // No function is used for writing
; 0000 020B // image data to external memory
; 0000 020C glcd_init_data.writexmem=NULL;
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0000 020D // Set the LCD temperature coefficient
; 0000 020E glcd_init_data.temp_coef=PCD8544_DEFAULT_TEMP_COEF;
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 020F // Set the LCD bias
; 0000 0210 glcd_init_data.bias=PCD8544_DEFAULT_BIAS;
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 0211 // Set the LCD contrast control voltage VLCD
; 0000 0212 glcd_init_data.vlcd=PCD8544_DEFAULT_VLCD;
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 0213 
; 0000 0214 glcd_init(&glcd_init_data);
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 0215 
; 0000 0216  //AJUSTANDO RTC
; 0000 0217 
; 0000 0218 //day=25;
; 0000 0219 //month=07;
; 0000 021A //year=16;
; 0000 021B //rtc_set_time(16,11,10);
; 0000 021C //rtc_set_date(00,day,month,year);
; 0000 021D 
; 0000 021E 
; 0000 021F 
; 0000 0220 
; 0000 0221 // Global enable interrupts
; 0000 0222 #asm("sei")
;PCODE: $00000274 VOL: 0
	sei
;PCODE: $00000275 VOL: 0
; 0000 0223 
; 0000 0224 while (1)
;PCODE: $00000276 VOL: 0
; 0000 0225       {
; 0000 0226       horaDia();
;PCODE: $00000277 VOL: 0
; 0000 0227       hourprox=msg[4]+1;
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 0228       pcd8544_setvlcd(63); //Ajusta o Contraste
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 0229 
; 0000 022A       //INICIALIZAÇAO
; 0000 022B         /*
; 0000 022C                 // MODO IRON MAN
; 0000 022D       if(j==0)
; 0000 022E       {
; 0000 022F           glcd_setfont(font5x7);
; 0000 0230           j=1;
; 0000 0231           glcd_clear();
; 0000 0232           glcd_outtextxy(20,10,"WELCOME\n\n TO DATALOGGER");
; 0000 0233           delay_ms(2000);
; 0000 0234 
; 0000 0235           while(i<84)
; 0000 0236           {
; 0000 0237             glcd_clear();
; 0000 0238             glcd_putimagef(i,0,iron, GLCD_PUTCOPY);
; 0000 0239             delay_ms(200);
; 0000 023A             i++;
; 0000 023B 
; 0000 023C           }
; 0000 023D 
; 0000 023E       };   */
; 0000 023F 
; 0000 0240 
; 0000 0241       //RELOGIO MODO BATMAN
; 0000 0242 
; 0000 0243       j=0;
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 0244       while(j<12)
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0000 0245         {
; 0000 0246             horaDia();
;PCODE: $00000284 VOL: 0
; 0000 0247             if(hourprox==msg[4] && w==0)
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 0248             {
; 0000 0249                 save();
;PCODE: $00000290 VOL: 0
; 0000 024A                 w=1;
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0000 024B             }
; 0000 024C             if(flag==1)
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 024D             {
; 0000 024E                 k=getchar();
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0000 024F                 interrup(k);
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 0250                 flag=0;
;PCODE: $0000029B VOL: 0
; 0000 0251             }
; 0000 0252           glcd_clear();
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 0253           glcd_putimagef(44,0,batman, GLCD_PUTCOPY);
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 0254 
; 0000 0255           horaDia();
;PCODE: $000002A6 VOL: 0
; 0000 0256 
; 0000 0257           //HORA
; 0000 0258             a=18;
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0000 0259             for(z=0;z<8;z++)
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 025A             {
; 0000 025B                 glcd_putcharxy(a,18,msg[z]);
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
; 0000 025C                 a=a+6;
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
; 0000 025D             }
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0000 025E 
; 0000 025F 
; 0000 0260           //DIA
; 0000 0261             a=14;
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0000 0262             for(z=8;z<18;z++)
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0000 0263             {
; 0000 0264                 glcd_putcharxy(a,30,msg[z]);
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 0265                 a=a+6;
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 0266             }
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
; 0000 0267 
; 0000 0268           delay_ms(500);
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
; 0000 0269           j++;
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
; 0000 026A         }
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
; 0000 026B 
; 0000 026C 
; 0000 026D       //TESTE DE CONTRASTE
; 0000 026E       /*
; 0000 026F       while(i<127)
; 0000 0270       {
; 0000 0271        pcd8544_setvlcd(i);
; 0000 0272        j=(char)i;
; 0000 0273        glcd_putcharxy(30, 31, j);
; 0000 0274        delay_ms(300);
; 0000 0275        i++;
; 0000 0276       }  */
; 0000 0277 
; 0000 0278 
; 0000 0279       //DISQUETE
; 0000 027A       /*
; 0000 027B       glcd_clear();
; 0000 027C       glcd_putimagef(0,0,save, GLCD_PUTCOPY);
; 0000 027D       delay_ms(4000);   */
; 0000 027E 
; 0000 027F 
; 0000 0280       //TERMOMETRO IMPLEMENTADO
; 0000 0281 
; 0000 0282       j=0;
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
; 0000 0283       while(j<16)
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
; 0000 0284         {
; 0000 0285              horaDia();
;PCODE: $000002ED VOL: 0
; 0000 0286 
; 0000 0287             if(hourprox==msg[4] && w==0)
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
; 0000 0288             {
; 0000 0289                 save();
;PCODE: $000002F9 VOL: 0
; 0000 028A                 w=1;
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
; 0000 028B             }
; 0000 028C 
; 0000 028D             if(flag==1)
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
; 0000 028E             {
; 0000 028F                 k=getchar();
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
; 0000 0290                 interrup(k);
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
; 0000 0291                 flag=0;
;PCODE: $00000304 VOL: 0
; 0000 0292             }
; 0000 0293             glcd_clear();
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
; 0000 0294 
; 0000 0295             tempt();
;PCODE: $00000307 VOL: 0
; 0000 0296 
; 0000 0297             glcd_putcharxy(10,20,temp[0]);
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
; 0000 0298             glcd_putcharxy(16,20,temp[1]);  //+6    PRIMEIRO NUMERO DA TEMPERATURA
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
; 0000 0299             glcd_putcharxy(22,20,temp[2]);  //+6    SEGUNDO NUMERO DA TEMPERATURA
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
; 0000 029A             glcd_putcharxy(27,21,temp[3]);    //+5
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
; 0000 029B             glcd_putcharxy(31,20,temp[4]);   //+4   TERCEIRO NUMERO DA TEMPERATURA
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
; 0000 029C             glcd_putcharxy(36,20,temp[5]);
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
; 0000 029D             glcd_putcharxy(42,20,temp[6]);     //+11
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
; 0000 029E 
; 0000 029F             glcd_putimagef(60,7,icon, GLCD_PUTCOPY);
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
; 0000 02A0 
; 0000 02A1 
; 0000 02A2 
; 0000 02A3             delay_ms(500);
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
; 0000 02A4             j++;
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
; 0000 02A5         }
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
; 0000 02A6 
; 0000 02A7       w=0;
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
; 0000 02A8       }
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
; 0000 02A9 }
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
